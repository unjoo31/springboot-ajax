<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>


    <h1>카테고리별 기술 목록보기</h1>
    <hr />
    <select id="category" onchange="onCategoryChange()">

    </select>
    <select id="tech">

    </select>


    <script>
        async function fetchCategory() {
            // download

            // 서버로 /api/category 경로로 GET 요청을 보내고, 서버로부터 받은 응답을 response 변수에 저장합니다. 
            // await 키워드를 사용하여 비동기로 HTTP 요청을 처리합니다.
            let response = await fetch("/api/category");
            // 이전에 가져온 response 객체의 본문(body)을 JSON 형식으로 변환하여 body 변수에 저장합니다. 
            // 이렇게 함으로써 서버에서 보낸 JSON 데이터를 자바스크립트 객체로 사용할 수 있습니다.
            let body = await response.json(); // json -> js object

            // dom 제어

            // HTML 문서에서 id가 "category"인 엘리먼트를 선택하여 categoryEl 변수에 할당합니다. 
            // 이는 카테고리 드롭다운 메뉴를 나타내는 엘리먼트입니다.
            let categoryEl = document.querySelector("#category");

            // body 변수에 있는 JSON 객체를 순회하면서 각 카테고리 정보에 대해 반복 작업을 수행합니다.
            for (c of body) {
                // 새로운 option 엘리먼트를 생성하여 optionEl 변수에 할당합니다. 
                // 이렇게 생성한 옵션 엘리먼트는 드롭다운 메뉴에 추가할 각 카테고리의 옵션을 나타냅니다.
                let optionEl = document.createElement("option");
                // 새로 생성한 option 엘리먼트의 value 속성에 현재 카테고리의 id 값을 할당합니다.
                optionEl.value = c.id;
                // 새로 생성한 option 엘리먼트의 내용으로 현재 카테고리의 name 값을 할당합니다.
                optionEl.innerHTML = c.name;
                // 생성한 option 엘리먼트를 categoryEl 엘리먼트(드롭다운 메뉴)에 추가합니다. 
                // 이를 통해 각 카테고리의 옵션이 드롭다운 메뉴에 표시됩니다.
                categoryEl.append(optionEl);
            }
        }

        async function fetchTech(categoryId) {
            // download

            // 서버로 /api/tech 경로로 GET 요청을 보내고, 선택된 카테고리의 categoryId를 쿼리 파라미터로 전달합니다. 
            // 응답을 response 변수에 저장합니다. await 키워드를 사용하여 비동기로 HTTP 요청을 처리합니다.
            let response = await fetch("/api/tech?categoryId=" + categoryId);
            // 이전에 가져온 response 객체의 본문(body)을 JSON 형식으로 변환하여 body 변수에 저장합니다. 
            // 이렇게 함으로써 서버에서 보낸 JSON 데이터를 자바스크립트 객체로 사용할 수 있습니다.
            let body = await response.json();

            // 옵션 초기화
            // 옵션 초기화를 하는 이유
            // 이전의 데이터가 겹쳐지지 않도록 지워주고 실행하는게 올바른 값이 들어간.
            // HTML 문서에서 id가 "tech"인 엘리먼트를 선택하여 techEl 변수에 할당합니다. 이는 기술 드롭다운 메뉴를 나타내는 엘리먼트입니다.
            let techEl = document.querySelector("#tech");
            // 이전에 있던 옵션들을 지워주기 위해 techEl 엘리먼트의 내용을 비웁니다. 이전의 옵션들이 겹쳐지지 않도록 초기화하는 작업입니다.
            techEl.innerHTML = ""; // Clear previous options

            // dom 제어
            // body 변수에 있는 JSON 객체를 순회하면서 각 기술 정보에 대해 반복 작업을 수행합니다.
            for (t of body) {
                // 새로운 option 엘리먼트를 생성하여 optionEl 변수에 할당합니다. 
                // 이렇게 생성한 옵션 엘리먼트는 드롭다운 메뉴에 추가할 각 기술의 옵션을 나타냅니다.
                let optionEl = document.createElement("option");
                // 새로 생성한 option 엘리먼트의 value 속성에 현재 기술의 id 값을 할당합니다.
                optionEl.value = t.id;
                // 새로 생성한 option 엘리먼트의 내용으로 현재 기술의 name 값을 할당합니다.
                optionEl.innerHTML = t.name;
                // 생성한 option 엘리먼트를 techEl 엘리먼트(드롭다운 메뉴)에 추가합니다. 이를 통해 각 기술의 옵션이 드롭다운 메뉴에 표시됩니다.
                techEl.append(optionEl);
            }
        }

        async function onCategoryChange() {
            // HTML 문서에서 id가 "category"인 엘리먼트를 선택하여 categoryEl 변수에 할당합니다. 
            // 이 엘리먼트는 카테고리 선택을 위한 드롭다운 메뉴입니다.
            let categoryEl = document.querySelector("#category");
            // categoryEl 엘리먼트의 현재 선택된 값, 즉 선택된 카테고리의 id 값을 selectedCategoryId 변수에 할당합니다.
            let selectedCategoryId = categoryEl.value;
            // fetchTech() 함수를 호출하여 선택된 카테고리의 id 값을 인자로 전달합니다. 
            // 이렇게 함으로써 선택된 카테고리에 해당하는 기술 목록을 가져와서 드롭다운 메뉴에 업데이트합니다.
            fetchTech(selectedCategoryId);
        }

        // 화면 초기화
        fetchCategory();
        fetchTech(1);
    </script>
</body>


</html>